// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SelectResult.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/parser.h"

#include "SireMol/select.h"

#include "SireStream/shareddatastream.h"

#include "select.h"

#include "select.h"

SireMol::SelectResult __copy__(const SireMol::SelectResult &other){ return SireMol::SelectResult(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_SelectResult_class(){

    { //::SireMol::SelectResult
        typedef bp::class_< SireMol::SelectResult, bp::bases< SireBase::Property > > SelectResult_exposer_t;
        SelectResult_exposer_t SelectResult_exposer = SelectResult_exposer_t( "SelectResult", "This class holds the result of a Select\n\nAuthor: Christopher Woods\n", bp::init< >("") );
        bp::scope SelectResult_scope( SelectResult_exposer );
        SelectResult_exposer.def( bp::init< SireMol::MolGroupsBase const & >(( bp::arg("molgroups") ), "") );
        SelectResult_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("molgroup") ), "") );
        SelectResult_exposer.def( bp::init< SireMol::Molecules const & >(( bp::arg("molecules") ), "") );
        SelectResult_exposer.def( bp::init< SireMol::MoleculeView const & >(( bp::arg("molview") ), "") );
        SelectResult_exposer.def( bp::init< QList< SireMol::ViewsOfMol > >(( bp::arg("molviews") ), "") );
        SelectResult_exposer.def( bp::init< SireMol::SelectResult const & >(( bp::arg("other") ), "") );
        { //::SireMol::SelectResult::count
        
            typedef int ( ::SireMol::SelectResult::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireMol::SelectResult::count );
            
            SelectResult_exposer.def( 
                "count"
                , count_function_value
                , "" );
        
        }
        { //::SireMol::SelectResult::isEmpty
        
            typedef bool ( ::SireMol::SelectResult::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::SelectResult::isEmpty );
            
            SelectResult_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , "" );
        
        }
        { //::SireMol::SelectResult::move
        
            typedef ::SireMol::SelectResultMover ( ::SireMol::SelectResult::*move_function_type)(  ) const;
            move_function_type move_function_value( &::SireMol::SelectResult::move );
            
            SelectResult_exposer.def( 
                "move"
                , move_function_value
                , "" );
        
        }
        SelectResult_exposer.def( bp::self != bp::self );
        { //::SireMol::SelectResult::operator=
        
            typedef ::SireMol::SelectResult & ( ::SireMol::SelectResult::*assign_function_type)( ::SireMol::SelectResult const & ) ;
            assign_function_type assign_function_value( &::SireMol::SelectResult::operator= );
            
            SelectResult_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SelectResult_exposer.def( bp::self == bp::self );
        { //::SireMol::SelectResult::operator[]
        
            typedef ::SireMol::MolViewPtr ( ::SireMol::SelectResult::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::SelectResult::operator[] );
            
            SelectResult_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMol::SelectResult::size
        
            typedef int ( ::SireMol::SelectResult::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireMol::SelectResult::size );
            
            SelectResult_exposer.def( 
                "size"
                , size_function_value
                , "" );
        
        }
        { //::SireMol::SelectResult::toString
        
            typedef ::QString ( ::SireMol::SelectResult::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::SelectResult::toString );
            
            SelectResult_exposer.def( 
                "toString"
                , toString_function_value
                , "" );
        
        }
        { //::SireMol::SelectResult::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::SelectResult::typeName );
            
            SelectResult_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMol::SelectResult::views
        
            typedef ::QList< SireMol::ViewsOfMol > ( ::SireMol::SelectResult::*views_function_type)(  ) const;
            views_function_type views_function_value( &::SireMol::SelectResult::views );
            
            SelectResult_exposer.def( 
                "views"
                , views_function_value
                , "" );
        
        }
        { //::SireMol::SelectResult::what
        
            typedef char const * ( ::SireMol::SelectResult::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::SelectResult::what );
            
            SelectResult_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        SelectResult_exposer.staticmethod( "typeName" );
        SelectResult_exposer.def( "__copy__", &__copy__);
        SelectResult_exposer.def( "__deepcopy__", &__copy__);
        SelectResult_exposer.def( "clone", &__copy__);
        SelectResult_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::SelectResult >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SelectResult_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::SelectResult >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SelectResult_exposer.def( "__str__", &__str__< ::SireMol::SelectResult > );
        SelectResult_exposer.def( "__repr__", &__str__< ::SireMol::SelectResult > );
        SelectResult_exposer.def( "__len__", &__len_size< ::SireMol::SelectResult > );
    }

}
