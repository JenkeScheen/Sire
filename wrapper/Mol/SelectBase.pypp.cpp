// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "SelectBase.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/parser.h"

#include "SireMol/select.h"

#include "SireStream/shareddatastream.h"

#include "select.h"

#include "select.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_SelectBase_class(){

    { //::SireMol::SelectBase
        typedef bp::class_< SireMol::SelectBase, bp::bases< SireBase::Property >, boost::noncopyable > SelectBase_exposer_t;
        SelectBase_exposer_t SelectBase_exposer = SelectBase_exposer_t( "SelectBase", "This is the base class of all of the select objects\n\nAuthor: Christopher Woods\n", bp::no_init );
        bp::scope SelectBase_scope( SelectBase_exposer );
        { //::SireMol::SelectBase::null
        
            typedef ::SireMol::Select const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMol::SelectBase::null );
            
            SelectBase_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy<bp::clone_const_reference>()
                , "" );
        
        }
        { //::SireMol::SelectBase::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::SelectBase::typeName );
            
            SelectBase_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        SelectBase_exposer.staticmethod( "null" );
        SelectBase_exposer.staticmethod( "typeName" );
        SelectBase_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::SelectBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SelectBase_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::SelectBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SelectBase_exposer.def( "__str__", &__str__< ::SireMol::SelectBase > );
        SelectBase_exposer.def( "__repr__", &__str__< ::SireMol::SelectBase > );
    }

}
