// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GromacsBond.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "gromacsparams.h"

#include "gromacsparams.h"

SireMM::GromacsBond __copy__(const SireMM::GromacsBond &other){ return SireMM::GromacsBond(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/len.hpp"

void register_GromacsBond_class(){

    { //::SireMM::GromacsBond
        typedef bp::class_< SireMM::GromacsBond > GromacsBond_exposer_t;
        GromacsBond_exposer_t GromacsBond_exposer = GromacsBond_exposer_t( "GromacsBond", "This class holds all of the information about a Gromacs Bond\n\nAuthor: Christopher Woods\n", bp::init< >("") );
        bp::scope GromacsBond_scope( GromacsBond_exposer );
        GromacsBond_exposer.def( bp::init< int, double, bp::optional< double, double, double > >(( bp::arg("function_type"), bp::arg("k0"), bp::arg("k1")=0, bp::arg("k2")=0, bp::arg("k3")=0 ), "") );
        GromacsBond_exposer.def( bp::init< int, QList< double > const & >(( bp::arg("function_type"), bp::arg("params") ), "") );
        GromacsBond_exposer.def( bp::init< SireCAS::Expression const &, SireCAS::Symbol const & >(( bp::arg("bond"), bp::arg("R") ), "") );
        GromacsBond_exposer.def( bp::init< SireMM::GromacsBond const & >(( bp::arg("other") ), "") );
        { //::SireMM::GromacsBond::at
        
            typedef double ( ::SireMM::GromacsBond::*at_function_type)( int ) const;
            at_function_type at_function_value( &::SireMM::GromacsBond::at );
            
            GromacsBond_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMM::GromacsBond::count
        
            typedef int ( ::SireMM::GromacsBond::*count_function_type)(  ) const;
            count_function_type count_function_value( &::SireMM::GromacsBond::count );
            
            GromacsBond_exposer.def( 
                "count"
                , count_function_value
                , "" );
        
        }
        { //::SireMM::GromacsBond::functionType
        
            typedef int ( ::SireMM::GromacsBond::*functionType_function_type)(  ) const;
            functionType_function_type functionType_function_value( &::SireMM::GromacsBond::functionType );
            
            GromacsBond_exposer.def( 
                "functionType"
                , functionType_function_value
                , "" );
        
        }
        { //::SireMM::GromacsBond::functionTypeString
        
            typedef ::QString ( ::SireMM::GromacsBond::*functionTypeString_function_type)(  ) const;
            functionTypeString_function_type functionTypeString_function_value( &::SireMM::GromacsBond::functionTypeString );
            
            GromacsBond_exposer.def( 
                "functionTypeString"
                , functionTypeString_function_value
                , "" );
        
        }
        { //::SireMM::GromacsBond::hash
        
            typedef ::uint ( ::SireMM::GromacsBond::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireMM::GromacsBond::hash );
            
            GromacsBond_exposer.def( 
                "hash"
                , hash_function_value
                , "" );
        
        }
        GromacsBond_exposer.def( bp::self != bp::self );
        GromacsBond_exposer.def( bp::self < bp::self );
        GromacsBond_exposer.def( bp::self <= bp::self );
        { //::SireMM::GromacsBond::operator=
        
            typedef ::SireMM::GromacsBond & ( ::SireMM::GromacsBond::*assign_function_type)( ::SireMM::GromacsBond const & ) ;
            assign_function_type assign_function_value( &::SireMM::GromacsBond::operator= );
            
            GromacsBond_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        GromacsBond_exposer.def( bp::self == bp::self );
        GromacsBond_exposer.def( bp::self > bp::self );
        GromacsBond_exposer.def( bp::self >= bp::self );
        { //::SireMM::GromacsBond::operator[]
        
            typedef double ( ::SireMM::GromacsBond::*__getitem___function_type)( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMM::GromacsBond::operator[] );
            
            GromacsBond_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , "" );
        
        }
        { //::SireMM::GromacsBond::parameters
        
            typedef ::QList< double > ( ::SireMM::GromacsBond::*parameters_function_type)(  ) const;
            parameters_function_type parameters_function_value( &::SireMM::GromacsBond::parameters );
            
            GromacsBond_exposer.def( 
                "parameters"
                , parameters_function_value
                , "" );
        
        }
        { //::SireMM::GromacsBond::size
        
            typedef int ( ::SireMM::GromacsBond::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireMM::GromacsBond::size );
            
            GromacsBond_exposer.def( 
                "size"
                , size_function_value
                , "" );
        
        }
        { //::SireMM::GromacsBond::toExpression
        
            typedef ::SireCAS::Expression ( ::SireMM::GromacsBond::*toExpression_function_type)( ::SireCAS::Symbol const & ) const;
            toExpression_function_type toExpression_function_value( &::SireMM::GromacsBond::toExpression );
            
            GromacsBond_exposer.def( 
                "toExpression"
                , toExpression_function_value
                , ( bp::arg("R") )
                , "" );
        
        }
        { //::SireMM::GromacsBond::toString
        
            typedef ::QString ( ::SireMM::GromacsBond::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::GromacsBond::toString );
            
            GromacsBond_exposer.def( 
                "toString"
                , toString_function_value
                , "" );
        
        }
        { //::SireMM::GromacsBond::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::GromacsBond::typeName );
            
            GromacsBond_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::GromacsBond::what
        
            typedef char const * ( ::SireMM::GromacsBond::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::GromacsBond::what );
            
            GromacsBond_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        GromacsBond_exposer.staticmethod( "typeName" );
        GromacsBond_exposer.def( "__copy__", &__copy__);
        GromacsBond_exposer.def( "__deepcopy__", &__copy__);
        GromacsBond_exposer.def( "clone", &__copy__);
        GromacsBond_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::GromacsBond >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GromacsBond_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::GromacsBond >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GromacsBond_exposer.def( "__str__", &__str__< ::SireMM::GromacsBond > );
        GromacsBond_exposer.def( "__repr__", &__str__< ::SireMM::GromacsBond > );
        GromacsBond_exposer.def( "__len__", &__len_size< ::SireMM::GromacsBond > );
        GromacsBond_exposer.def( "__hash__", &::SireMM::GromacsBond::hash );
    }

}
