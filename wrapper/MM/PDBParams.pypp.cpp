// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PDBParams.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/mover.hpp"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "pdbparams.h"

#include "pdbparams.h"

SireMM::PDBParams __copy__(const SireMM::PDBParams &other){ return SireMM::PDBParams(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_PDBParams_class(){

    { //::SireMM::PDBParams
        typedef bp::class_< SireMM::PDBParams, bp::bases< SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property > > PDBParams_exposer_t;
        PDBParams_exposer_t PDBParams_exposer = PDBParams_exposer_t( "PDBParams", "This class holds all of the extra parameter data that has been\nread into the molecule from a PDB file\n\nAuthor: Lester Hedges\n", bp::init< >("Construct an empty set of parameters") );
        bp::scope PDBParams_scope( PDBParams_exposer );
        PDBParams_exposer.def( bp::init< SireMol::MoleculeView const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("molecule"), bp::arg("map")=SireBase::PropertyMap() ), "Construct so that the parameters for the passed molecule molecule can be created") );
        PDBParams_exposer.def( bp::init< SireMol::MoleculeInfo const & >(( bp::arg("molinfo") ), "Constructor when we only have the molecule info") );
        PDBParams_exposer.def( bp::init< SireMol::MoleculeInfoData const & >(( bp::arg("molinfo") ), "Constructor when we only have the molecule info") );
        PDBParams_exposer.def( bp::init< SireMM::PDBParams const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::PDBParams::info
        
            typedef ::SireMol::MoleculeInfo ( ::SireMM::PDBParams::*info_function_type)(  ) const;
            info_function_type info_function_value( &::SireMM::PDBParams::info );
            
            PDBParams_exposer.def( 
                "info"
                , info_function_value
                , "Return the MoleculeInfo that describes the molecule whose parameters\nare stored in this object" );
        
        }
        { //::SireMM::PDBParams::isCompatibleWith
        
            typedef bool ( ::SireMM::PDBParams::*isCompatibleWith_function_type)( ::SireMol::MoleculeInfoData const & ) const;
            isCompatibleWith_function_type isCompatibleWith_function_value( &::SireMM::PDBParams::isCompatibleWith );
            
            PDBParams_exposer.def( 
                "isCompatibleWith"
                , isCompatibleWith_function_value
                , ( bp::arg("molinfo") )
                , "Return whether or not these parameters are compatible with the molecule\nwhose info is in molinfo" );
        
        }
        PDBParams_exposer.def( bp::self != bp::self );
        { //::SireMM::PDBParams::operator=
        
            typedef ::SireMM::PDBParams & ( ::SireMM::PDBParams::*assign_function_type)( ::SireMM::PDBParams const & ) ;
            assign_function_type assign_function_value( &::SireMM::PDBParams::operator= );
            
            PDBParams_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        PDBParams_exposer.def( bp::self == bp::self );
        { //::SireMM::PDBParams::propertyMap
        
            typedef ::SireBase::PropertyMap const & ( ::SireMM::PDBParams::*propertyMap_function_type)(  ) const;
            propertyMap_function_type propertyMap_function_value( &::SireMM::PDBParams::propertyMap );
            
            PDBParams_exposer.def( 
                "propertyMap"
                , propertyMap_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the property map used to map data to molecular properties" );
        
        }
        { //::SireMM::PDBParams::setPropertyMap
        
            typedef void ( ::SireMM::PDBParams::*setPropertyMap_function_type)( ::SireBase::PropertyMap const & ) ;
            setPropertyMap_function_type setPropertyMap_function_value( &::SireMM::PDBParams::setPropertyMap );
            
            PDBParams_exposer.def( 
                "setPropertyMap"
                , setPropertyMap_function_value
                , ( bp::arg("map") )
                , "Set the property map that is used to map data to molecular properties" );
        
        }
        { //::SireMM::PDBParams::toString
        
            typedef ::QString ( ::SireMM::PDBParams::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::PDBParams::toString );
            
            PDBParams_exposer.def( 
                "toString"
                , toString_function_value
                , "Return a string representation of these parameters" );
        
        }
        { //::SireMM::PDBParams::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::PDBParams::typeName );
            
            PDBParams_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::PDBParams::updateFrom
        
            typedef void ( ::SireMM::PDBParams::*updateFrom_function_type)( ::SireMol::MoleculeView const & ) ;
            updateFrom_function_type updateFrom_function_value( &::SireMM::PDBParams::updateFrom );
            
            PDBParams_exposer.def( 
                "updateFrom"
                , updateFrom_function_value
                , ( bp::arg("molview") )
                , "Update these parameters from the contents of the passed molecule. This\nwill only work if these parameters are compatible with this molecule" );
        
        }
        { //::SireMM::PDBParams::validate
        
            typedef ::QStringList ( ::SireMM::PDBParams::*validate_function_type)(  ) const;
            validate_function_type validate_function_value( &::SireMM::PDBParams::validate );
            
            PDBParams_exposer.def( 
                "validate"
                , validate_function_value
                , "Validate that the parameters in this object are correct and consistent.\nThis returns a list of errors if there are any problems. An empty list\nmeans that everything is ok." );
        
        }
        PDBParams_exposer.staticmethod( "typeName" );
        PDBParams_exposer.def( "__copy__", &__copy__);
        PDBParams_exposer.def( "__deepcopy__", &__copy__);
        PDBParams_exposer.def( "clone", &__copy__);
        PDBParams_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::PDBParams >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PDBParams_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::PDBParams >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PDBParams_exposer.def( "__str__", &__str__< ::SireMM::PDBParams > );
        PDBParams_exposer.def( "__repr__", &__str__< ::SireMM::PDBParams > );
    }

}
