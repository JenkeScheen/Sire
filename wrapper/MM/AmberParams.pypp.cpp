// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AmberParams.pypp.hpp"

namespace bp = boost::python;

#include "amberparams.h"

#include "SireCAS/expression.h"

#include "SireMol/angleid.h"

#include "SireMol/atomidx.h"

#include "SireMol/bondid.h"

#include "SireMol/dihedralid.h"

#include "SireMol/improperid.h"

#include "SireMol/molecule.h"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "amberparams.h"

#include "amberparams.h"

SireMM::AmberParams __copy__(const SireMM::AmberParams &other){ return SireMM::AmberParams(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_AmberParams_class(){

    { //::SireMM::AmberParams
        typedef bp::class_< SireMM::AmberParams, bp::bases< SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property > > AmberParams_exposer_t;
        AmberParams_exposer_t AmberParams_exposer = AmberParams_exposer_t( "AmberParams", "This class stores AMBER bonded force field parameters for\na collection of bonds, angles, dihedrals, impropers\nand 1-4 scaling factors.\n\nAuthor: Julien Michel  Christopher Woods\n", bp::init< >("Null Constructor") );
        bp::scope AmberParams_scope( AmberParams_exposer );
        AmberParams_exposer.def( bp::init< SireMol::MoleculeView const & >(( bp::arg("molecule") ), "Constructor for the passed molecule") );
        AmberParams_exposer.def( bp::init< SireMol::MoleculeInfoData const & >(( bp::arg("molinfo") ), "Constructor for the passed molecule") );
        AmberParams_exposer.def( bp::init< SireMM::AmberParams const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::AmberParams::add
        
            typedef void ( ::SireMM::AmberParams::*add_function_type)( ::SireMol::BondID const &,double,double ) ;
            add_function_type add_function_value( &::SireMM::AmberParams::add );
            
            AmberParams_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("bond"), bp::arg("k"), bp::arg("r0") )
                , "" );
        
        }
        { //::SireMM::AmberParams::add
        
            typedef void ( ::SireMM::AmberParams::*add_function_type)( ::SireMol::AngleID const &,double,double ) ;
            add_function_type add_function_value( &::SireMM::AmberParams::add );
            
            AmberParams_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("angle"), bp::arg("k"), bp::arg("theta0") )
                , "" );
        
        }
        { //::SireMM::AmberParams::add
        
            typedef void ( ::SireMM::AmberParams::*add_function_type)( ::SireMol::DihedralID const &,double,double,double ) ;
            add_function_type add_function_value( &::SireMM::AmberParams::add );
            
            AmberParams_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("dihedral"), bp::arg("k"), bp::arg("periodicity"), bp::arg("phase") )
                , "" );
        
        }
        { //::SireMM::AmberParams::add
        
            typedef void ( ::SireMM::AmberParams::*add_function_type)( ::SireMol::ImproperID const &,double,double,double ) ;
            add_function_type add_function_value( &::SireMM::AmberParams::add );
            
            AmberParams_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("improper"), bp::arg("v"), bp::arg("periodicity"), bp::arg("phase") )
                , "" );
        
        }
        { //::SireMM::AmberParams::addNB14
        
            typedef void ( ::SireMM::AmberParams::*addNB14_function_type)( ::SireMol::BondID const &,double,double ) ;
            addNB14_function_type addNB14_function_value( &::SireMM::AmberParams::addNB14 );
            
            AmberParams_exposer.def( 
                "addNB14"
                , addNB14_function_value
                , ( bp::arg("pair"), bp::arg("cscl"), bp::arg("ljscl") )
                , "" );
        
        }
        { //::SireMM::AmberParams::angles
        
            typedef ::QHash< SireMol::AngleID, SireMM::AmberAngle > ( ::SireMM::AmberParams::*angles_function_type)(  ) const;
            angles_function_type angles_function_value( &::SireMM::AmberParams::angles );
            
            AmberParams_exposer.def( 
                "angles"
                , angles_function_value
                , "" );
        
        }
        { //::SireMM::AmberParams::bonds
        
            typedef ::QHash< SireMol::BondID, SireMM::AmberBond > ( ::SireMM::AmberParams::*bonds_function_type)(  ) const;
            bonds_function_type bonds_function_value( &::SireMM::AmberParams::bonds );
            
            AmberParams_exposer.def( 
                "bonds"
                , bonds_function_value
                , "" );
        
        }
        { //::SireMM::AmberParams::dihedrals
        
            typedef ::QHash< SireMol::DihedralID, SireMM::AmberDihedral > ( ::SireMM::AmberParams::*dihedrals_function_type)(  ) const;
            dihedrals_function_type dihedrals_function_value( &::SireMM::AmberParams::dihedrals );
            
            AmberParams_exposer.def( 
                "dihedrals"
                , dihedrals_function_value
                , "" );
        
        }
        { //::SireMM::AmberParams::getNB14
        
            typedef ::SireMM::AmberNB14 ( ::SireMM::AmberParams::*getNB14_function_type)( ::SireMol::BondID const & ) const;
            getNB14_function_type getNB14_function_value( &::SireMM::AmberParams::getNB14 );
            
            AmberParams_exposer.def( 
                "getNB14"
                , getNB14_function_value
                , ( bp::arg("pair") )
                , "" );
        
        }
        { //::SireMM::AmberParams::getParameter
        
            typedef ::SireMM::AmberBond ( ::SireMM::AmberParams::*getParameter_function_type)( ::SireMol::BondID const & ) const;
            getParameter_function_type getParameter_function_value( &::SireMM::AmberParams::getParameter );
            
            AmberParams_exposer.def( 
                "getParameter"
                , getParameter_function_value
                , ( bp::arg("bond") )
                , "" );
        
        }
        { //::SireMM::AmberParams::getParameter
        
            typedef ::SireMM::AmberAngle ( ::SireMM::AmberParams::*getParameter_function_type)( ::SireMol::AngleID const & ) const;
            getParameter_function_type getParameter_function_value( &::SireMM::AmberParams::getParameter );
            
            AmberParams_exposer.def( 
                "getParameter"
                , getParameter_function_value
                , ( bp::arg("angle") )
                , "" );
        
        }
        { //::SireMM::AmberParams::getParameter
        
            typedef ::SireMM::AmberDihedral ( ::SireMM::AmberParams::*getParameter_function_type)( ::SireMol::DihedralID const & ) const;
            getParameter_function_type getParameter_function_value( &::SireMM::AmberParams::getParameter );
            
            AmberParams_exposer.def( 
                "getParameter"
                , getParameter_function_value
                , ( bp::arg("dihedral") )
                , "" );
        
        }
        { //::SireMM::AmberParams::getParameter
        
            typedef ::SireMM::AmberDihedral ( ::SireMM::AmberParams::*getParameter_function_type)( ::SireMol::ImproperID const & ) const;
            getParameter_function_type getParameter_function_value( &::SireMM::AmberParams::getParameter );
            
            AmberParams_exposer.def( 
                "getParameter"
                , getParameter_function_value
                , ( bp::arg("improper") )
                , "" );
        
        }
        { //::SireMM::AmberParams::impropers
        
            typedef ::QHash< SireMol::ImproperID, SireMM::AmberDihedral > ( ::SireMM::AmberParams::*impropers_function_type)(  ) const;
            impropers_function_type impropers_function_value( &::SireMM::AmberParams::impropers );
            
            AmberParams_exposer.def( 
                "impropers"
                , impropers_function_value
                , "" );
        
        }
        { //::SireMM::AmberParams::info
        
            typedef ::SireMol::MoleculeInfoData const & ( ::SireMM::AmberParams::*info_function_type)(  ) const;
            info_function_type info_function_value( &::SireMM::AmberParams::info );
            
            AmberParams_exposer.def( 
                "info"
                , info_function_value
                , bp::return_value_policy< bp::copy_const_reference >()
                , "Return the layout of the molecule whose flexibility is contained\nin this object" );
        
        }
        { //::SireMM::AmberParams::isCompatibleWith
        
            typedef bool ( ::SireMM::AmberParams::*isCompatibleWith_function_type)( ::SireMol::MoleculeInfoData const & ) const;
            isCompatibleWith_function_type isCompatibleWith_function_value( &::SireMM::AmberParams::isCompatibleWith );
            
            AmberParams_exposer.def( 
                "isCompatibleWith"
                , isCompatibleWith_function_value
                , ( bp::arg("molinfo") )
                , "Return whether or not this flexibility is compatible with the molecule\nwhose info is in molinfo" );
        
        }
        { //::SireMM::AmberParams::nb14s
        
            typedef ::QHash< SireMol::BondID, SireMM::AmberNB14 > ( ::SireMM::AmberParams::*nb14s_function_type)(  ) const;
            nb14s_function_type nb14s_function_value( &::SireMM::AmberParams::nb14s );
            
            AmberParams_exposer.def( 
                "nb14s"
                , nb14s_function_value
                , "" );
        
        }
        AmberParams_exposer.def( bp::self != bp::self );
        AmberParams_exposer.def( bp::self + bp::self );
        { //::SireMM::AmberParams::operator=
        
            typedef ::SireMM::AmberParams & ( ::SireMM::AmberParams::*assign_function_type)( ::SireMM::AmberParams const & ) ;
            assign_function_type assign_function_value( &::SireMM::AmberParams::operator= );
            
            AmberParams_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AmberParams_exposer.def( bp::self == bp::self );
        { //::SireMM::AmberParams::remove
        
            typedef void ( ::SireMM::AmberParams::*remove_function_type)( ::SireMol::BondID const & ) ;
            remove_function_type remove_function_value( &::SireMM::AmberParams::remove );
            
            AmberParams_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("bond") )
                , "" );
        
        }
        { //::SireMM::AmberParams::remove
        
            typedef void ( ::SireMM::AmberParams::*remove_function_type)( ::SireMol::AngleID const & ) ;
            remove_function_type remove_function_value( &::SireMM::AmberParams::remove );
            
            AmberParams_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("angle") )
                , "" );
        
        }
        { //::SireMM::AmberParams::remove
        
            typedef void ( ::SireMM::AmberParams::*remove_function_type)( ::SireMol::DihedralID const & ) ;
            remove_function_type remove_function_value( &::SireMM::AmberParams::remove );
            
            AmberParams_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("dihedral") )
                , "" );
        
        }
        { //::SireMM::AmberParams::remove
        
            typedef void ( ::SireMM::AmberParams::*remove_function_type)( ::SireMol::ImproperID const & ) ;
            remove_function_type remove_function_value( &::SireMM::AmberParams::remove );
            
            AmberParams_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("improper") )
                , "" );
        
        }
        { //::SireMM::AmberParams::removeNB14
        
            typedef void ( ::SireMM::AmberParams::*removeNB14_function_type)( ::SireMol::BondID const & ) ;
            removeNB14_function_type removeNB14_function_value( &::SireMM::AmberParams::removeNB14 );
            
            AmberParams_exposer.def( 
                "removeNB14"
                , removeNB14_function_value
                , ( bp::arg("pair") )
                , "" );
        
        }
        { //::SireMM::AmberParams::toString
        
            typedef ::QString ( ::SireMM::AmberParams::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::AmberParams::toString );
            
            AmberParams_exposer.def( 
                "toString"
                , toString_function_value
                , "" );
        
        }
        { //::SireMM::AmberParams::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::AmberParams::typeName );
            
            AmberParams_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        AmberParams_exposer.staticmethod( "typeName" );
        AmberParams_exposer.def( "__copy__", &__copy__);
        AmberParams_exposer.def( "__deepcopy__", &__copy__);
        AmberParams_exposer.def( "clone", &__copy__);
        AmberParams_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::AmberParams >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AmberParams_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::AmberParams >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AmberParams_exposer.def( "__str__", &__str__< ::SireMM::AmberParams > );
        AmberParams_exposer.def( "__repr__", &__str__< ::SireMM::AmberParams > );
    }

}
