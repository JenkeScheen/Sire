// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GromacsAtomType.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "gromacsparams.h"

#include "gromacsparams.h"

SireMM::GromacsAtomType __copy__(const SireMM::GromacsAtomType &other){ return SireMM::GromacsAtomType(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_GromacsAtomType_class(){

    { //::SireMM::GromacsAtomType
        typedef bp::class_< SireMM::GromacsAtomType > GromacsAtomType_exposer_t;
        GromacsAtomType_exposer_t GromacsAtomType_exposer = GromacsAtomType_exposer_t( "GromacsAtomType", "This class represents a Gromacs format atom type. This\ncombines particle type information with charge, mass,\nand LJ parameter info\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope GromacsAtomType_scope( GromacsAtomType_exposer );
        bp::enum_< SireMM::GromacsAtomType::COMBINING_RULE>("COMBINING_RULE")
            .value("UNKNOWN_RULE", SireMM::GromacsAtomType::UNKNOWN_RULE)
            .value("ARITHMETIC", SireMM::GromacsAtomType::ARITHMETIC)
            .value("GEOMETRIC", SireMM::GromacsAtomType::GEOMETRIC)
            .export_values()
            ;
        bp::enum_< SireMM::GromacsAtomType::PARTICLE_TYPE>("PARTICLE_TYPE")
            .value("UNKNOWN_TYPE", SireMM::GromacsAtomType::UNKNOWN_TYPE)
            .value("ATOM", SireMM::GromacsAtomType::ATOM)
            .value("SHELL", SireMM::GromacsAtomType::SHELL)
            .value("VIRTUAL", SireMM::GromacsAtomType::VIRTUAL)
            .export_values()
            ;
        GromacsAtomType_exposer.def( bp::init< QString, SireUnits::Dimension::MolarMass, SireUnits::Dimension::Charge, SireMM::GromacsAtomType::PARTICLE_TYPE, double, double, SireMM::GromacsAtomType::COMBINING_RULE >(( bp::arg("atom_type"), bp::arg("mass"), bp::arg("charge"), bp::arg("particle_type"), bp::arg("v"), bp::arg("w"), bp::arg("combining_rule") ), "Construct passing in all parameters") );
        GromacsAtomType_exposer.def( bp::init< SireMM::GromacsAtomType const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::GromacsAtomType::V
        
            typedef double ( ::SireMM::GromacsAtomType::*V_function_type)(  ) const;
            V_function_type V_function_value( &::SireMM::GromacsAtomType::V );
            
            GromacsAtomType_exposer.def( 
                "V"
                , V_function_value
                , "" );
        
        }
        { //::SireMM::GromacsAtomType::W
        
            typedef double ( ::SireMM::GromacsAtomType::*W_function_type)(  ) const;
            W_function_type W_function_value( &::SireMM::GromacsAtomType::W );
            
            GromacsAtomType_exposer.def( 
                "W"
                , W_function_value
                , "" );
        
        }
        { //::SireMM::GromacsAtomType::atomType
        
            typedef ::QString ( ::SireMM::GromacsAtomType::*atomType_function_type)(  ) const;
            atomType_function_type atomType_function_value( &::SireMM::GromacsAtomType::atomType );
            
            GromacsAtomType_exposer.def( 
                "atomType"
                , atomType_function_value
                , "" );
        
        }
        { //::SireMM::GromacsAtomType::charge
        
            typedef ::SireUnits::Dimension::Charge ( ::SireMM::GromacsAtomType::*charge_function_type)(  ) const;
            charge_function_type charge_function_value( &::SireMM::GromacsAtomType::charge );
            
            GromacsAtomType_exposer.def( 
                "charge"
                , charge_function_value
                , "" );
        
        }
        { //::SireMM::GromacsAtomType::combiningRule
        
            typedef ::SireMM::GromacsAtomType::COMBINING_RULE ( ::SireMM::GromacsAtomType::*combiningRule_function_type)(  ) const;
            combiningRule_function_type combiningRule_function_value( &::SireMM::GromacsAtomType::combiningRule );
            
            GromacsAtomType_exposer.def( 
                "combiningRule"
                , combiningRule_function_value
                , "" );
        
        }
        { //::SireMM::GromacsAtomType::combiningRuleString
        
            typedef ::QString ( ::SireMM::GromacsAtomType::*combiningRuleString_function_type)(  ) const;
            combiningRuleString_function_type combiningRuleString_function_value( &::SireMM::GromacsAtomType::combiningRuleString );
            
            GromacsAtomType_exposer.def( 
                "combiningRuleString"
                , combiningRuleString_function_value
                , "Return a string version of the combining rule" );
        
        }
        { //::SireMM::GromacsAtomType::fromGromacsTopLine
        
            typedef ::SireMM::GromacsAtomType ( *fromGromacsTopLine_function_type )( ::QString const & );
            fromGromacsTopLine_function_type fromGromacsTopLine_function_value( &::SireMM::GromacsAtomType::fromGromacsTopLine );
            
            GromacsAtomType_exposer.def( 
                "fromGromacsTopLine"
                , fromGromacsTopLine_function_value
                , ( bp::arg("line") )
                , "Create this object from the passed line from a Gromacs topology file" );
        
        }
        { //::SireMM::GromacsAtomType::mass
        
            typedef ::SireUnits::Dimension::MolarMass ( ::SireMM::GromacsAtomType::*mass_function_type)(  ) const;
            mass_function_type mass_function_value( &::SireMM::GromacsAtomType::mass );
            
            GromacsAtomType_exposer.def( 
                "mass"
                , mass_function_value
                , "" );
        
        }
        GromacsAtomType_exposer.def( bp::self != bp::self );
        { //::SireMM::GromacsAtomType::operator=
        
            typedef ::SireMM::GromacsAtomType & ( ::SireMM::GromacsAtomType::*assign_function_type)( ::SireMM::GromacsAtomType const & ) ;
            assign_function_type assign_function_value( &::SireMM::GromacsAtomType::operator= );
            
            GromacsAtomType_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        GromacsAtomType_exposer.def( bp::self == bp::self );
        { //::SireMM::GromacsAtomType::particleType
        
            typedef ::SireMM::GromacsAtomType::PARTICLE_TYPE ( ::SireMM::GromacsAtomType::*particleType_function_type)(  ) const;
            particleType_function_type particleType_function_value( &::SireMM::GromacsAtomType::particleType );
            
            GromacsAtomType_exposer.def( 
                "particleType"
                , particleType_function_value
                , "" );
        
        }
        { //::SireMM::GromacsAtomType::particleTypeLetter
        
            typedef ::QString ( ::SireMM::GromacsAtomType::*particleTypeLetter_function_type)(  ) const;
            particleTypeLetter_function_type particleTypeLetter_function_value( &::SireMM::GromacsAtomType::particleTypeLetter );
            
            GromacsAtomType_exposer.def( 
                "particleTypeLetter"
                , particleTypeLetter_function_value
                , "Return the single letter that represents the particle type" );
        
        }
        { //::SireMM::GromacsAtomType::particleTypeString
        
            typedef ::QString ( ::SireMM::GromacsAtomType::*particleTypeString_function_type)(  ) const;
            particleTypeString_function_type particleTypeString_function_value( &::SireMM::GromacsAtomType::particleTypeString );
            
            GromacsAtomType_exposer.def( 
                "particleTypeString"
                , particleTypeString_function_value
                , "Return a string version of the particle type" );
        
        }
        { //::SireMM::GromacsAtomType::toCombiningRule
        
            typedef ::SireMM::GromacsAtomType::COMBINING_RULE ( *toCombiningRule_function_type )( ::QString const &,bool * );
            toCombiningRule_function_type toCombiningRule_function_value( &::SireMM::GromacsAtomType::toCombiningRule );
            
            GromacsAtomType_exposer.def( 
                "toCombiningRule"
                , toCombiningRule_function_value
                , ( bp::arg("word"), bp::arg("ok")=bp::object() )
                , "Convert the passed string to a Gromacs combining rule type. Use ok to see if this\nworked correctly" );
        
        }
        { //::SireMM::GromacsAtomType::toGromacsTopLine
        
            typedef ::QString ( ::SireMM::GromacsAtomType::*toGromacsTopLine_function_type)(  ) const;
            toGromacsTopLine_function_type toGromacsTopLine_function_value( &::SireMM::GromacsAtomType::toGromacsTopLine );
            
            GromacsAtomType_exposer.def( 
                "toGromacsTopLine"
                , toGromacsTopLine_function_value
                , "Return this parameter as a line that is in the right format to go into\na Gromacs topology file" );
        
        }
        { //::SireMM::GromacsAtomType::toParticleType
        
            typedef ::SireMM::GromacsAtomType::PARTICLE_TYPE ( *toParticleType_function_type )( ::QString const &,bool * );
            toParticleType_function_type toParticleType_function_value( &::SireMM::GromacsAtomType::toParticleType );
            
            GromacsAtomType_exposer.def( 
                "toParticleType"
                , toParticleType_function_value
                , ( bp::arg("word"), bp::arg("ok")=bp::object() )
                , "Convert the passed string to a Gromacs particle type. Use ok to see if this\nworked correctly" );
        
        }
        { //::SireMM::GromacsAtomType::toString
        
            typedef ::QString ( ::SireMM::GromacsAtomType::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::GromacsAtomType::toString );
            
            GromacsAtomType_exposer.def( 
                "toString"
                , toString_function_value
                , "Return a string representation of this object" );
        
        }
        { //::SireMM::GromacsAtomType::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::GromacsAtomType::typeName );
            
            GromacsAtomType_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireMM::GromacsAtomType::what
        
            typedef char const * ( ::SireMM::GromacsAtomType::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::GromacsAtomType::what );
            
            GromacsAtomType_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        GromacsAtomType_exposer.staticmethod( "fromGromacsTopLine" );
        GromacsAtomType_exposer.staticmethod( "toCombiningRule" );
        GromacsAtomType_exposer.staticmethod( "toParticleType" );
        GromacsAtomType_exposer.staticmethod( "typeName" );
        GromacsAtomType_exposer.def( "__copy__", &__copy__);
        GromacsAtomType_exposer.def( "__deepcopy__", &__copy__);
        GromacsAtomType_exposer.def( "clone", &__copy__);
        GromacsAtomType_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::GromacsAtomType >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GromacsAtomType_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::GromacsAtomType >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GromacsAtomType_exposer.def( "__str__", &__str__< ::SireMM::GromacsAtomType > );
        GromacsAtomType_exposer.def( "__repr__", &__str__< ::SireMM::GromacsAtomType > );
    }

}
