// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AmberRst.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/parallel.h"

#include "SireBase/unittest.h"

#include "SireError/errors.h"

#include "SireMol/molecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "amber2.h"

#include <QElapsedTimer>

#include <QFile>

#include <QHash>

#include <QRegularExpression>

#include <QTextStream>

#include "amber2.h"

SireIO::AmberRst __copy__(const SireIO::AmberRst &other){ return SireIO::AmberRst(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_AmberRst_class(){

    { //::SireIO::AmberRst
        typedef bp::class_< SireIO::AmberRst, bp::bases< SireIO::MoleculeParser, SireBase::Property > > AmberRst_exposer_t;
        AmberRst_exposer_t AmberRst_exposer = AmberRst_exposer_t( "AmberRst", "This class represents an Amber-format restartcoordinate file (ascii),\ncurrently supporting these files from Amber7 to Amber16.\n\nThe format of this file is described here;\n\nhttp:ambermd.orgformats.html\n\n(specifically the AMBER coordinaterestart file specification\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope AmberRst_scope( AmberRst_exposer );
        AmberRst_exposer.def( bp::init< SireIO::AmberRst const & >(( bp::arg("other") ), "Copy constructor") );
        AmberRst_exposer.def( bp::self != bp::self );
        { //::SireIO::AmberRst::operator=
        
            typedef ::SireIO::AmberRst & ( ::SireIO::AmberRst::*assign_function_type)( ::SireIO::AmberRst const & ) ;
            assign_function_type assign_function_value( &::SireIO::AmberRst::operator= );
            
            AmberRst_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AmberRst_exposer.def( bp::self == bp::self );
        { //::SireIO::AmberRst::toString
        
            typedef ::QString ( ::SireIO::AmberRst::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireIO::AmberRst::toString );
            
            AmberRst_exposer.def( 
                "toString"
                , toString_function_value
                , "" );
        
        }
        { //::SireIO::AmberRst::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::AmberRst::typeName );
            
            AmberRst_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireIO::AmberRst::what
        
            typedef char const * ( ::SireIO::AmberRst::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireIO::AmberRst::what );
            
            AmberRst_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        AmberRst_exposer.staticmethod( "typeName" );
        AmberRst_exposer.def( "__copy__", &__copy__);
        AmberRst_exposer.def( "__deepcopy__", &__copy__);
        AmberRst_exposer.def( "clone", &__copy__);
        AmberRst_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::AmberRst >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AmberRst_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::AmberRst >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AmberRst_exposer.def( "__str__", &__str__< ::SireIO::AmberRst > );
        AmberRst_exposer.def( "__repr__", &__str__< ::SireIO::AmberRst > );
    }

}
