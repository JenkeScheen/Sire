// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Mol2Molecule.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/parallel.h"

#include "SireBase/stringproperty.h"

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireIO/mol2.h"

#include "SireMM/mol2params.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomcoords.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/units.h"

#include "mol2.h"

#include "mol2.h"

SireIO::Mol2Molecule __copy__(const SireIO::Mol2Molecule &other){ return SireIO::Mol2Molecule(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Mol2Molecule_class(){

    { //::SireIO::Mol2Molecule
        typedef bp::class_< SireIO::Mol2Molecule > Mol2Molecule_exposer_t;
        Mol2Molecule_exposer_t Mol2Molecule_exposer = Mol2Molecule_exposer_t( "Mol2Molecule", "This class provides functionality for readingwriting\nMol2 MOLECULE records.\n\nAuthor: Lester Hedges\n", bp::init< >("Default constructor.") );
        bp::scope Mol2Molecule_scope( Mol2Molecule_exposer );
        Mol2Molecule_exposer.def( bp::init< QVector< QString > const &, QStringList &, int &, bp::optional< QString, int > >(( bp::arg("lines"), bp::arg("errors"), bp::arg("num_records"), bp::arg("filename")=::QString( ), bp::arg("imol")=(int)(-1) ), "Constructor (from a Mol2 data record).") );
        Mol2Molecule_exposer.def( bp::init< SireMol::Molecule const &, QStringList &, bp::optional< QString, int > >(( bp::arg("mol"), bp::arg("errors"), bp::arg("filename")=::QString( ), bp::arg("imol")=(int)(-1) ), "Constructor (from a Sire Molecule).") );
        { //::SireIO::Mol2Molecule::appendAtom
        
            typedef void ( ::SireIO::Mol2Molecule::*appendAtom_function_type)( ::SireIO::Mol2Atom const & ) ;
            appendAtom_function_type appendAtom_function_value( &::SireIO::Mol2Molecule::appendAtom );
            
            Mol2Molecule_exposer.def( 
                "appendAtom"
                , appendAtom_function_value
                , ( bp::arg("atom") )
                , "Append an atom to the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::appendAtoms
        
            typedef void ( ::SireIO::Mol2Molecule::*appendAtoms_function_type)( ::QVector< SireIO::Mol2Atom > const & ) ;
            appendAtoms_function_type appendAtoms_function_value( &::SireIO::Mol2Molecule::appendAtoms );
            
            Mol2Molecule_exposer.def( 
                "appendAtoms"
                , appendAtoms_function_value
                , ( bp::arg("atoms") )
                , "Append a vector of atoms to the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::appendBond
        
            typedef void ( ::SireIO::Mol2Molecule::*appendBond_function_type)( ::SireIO::Mol2Bond const & ) ;
            appendBond_function_type appendBond_function_value( &::SireIO::Mol2Molecule::appendBond );
            
            Mol2Molecule_exposer.def( 
                "appendBond"
                , appendBond_function_value
                , ( bp::arg("bond") )
                , "Append a bond to the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::appendBonds
        
            typedef void ( ::SireIO::Mol2Molecule::*appendBonds_function_type)( ::QVector< SireIO::Mol2Bond > const & ) ;
            appendBonds_function_type appendBonds_function_value( &::SireIO::Mol2Molecule::appendBonds );
            
            Mol2Molecule_exposer.def( 
                "appendBonds"
                , appendBonds_function_value
                , ( bp::arg("bonds") )
                , "Append a vector of bonds to the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::appendSubstructure
        
            typedef void ( ::SireIO::Mol2Molecule::*appendSubstructure_function_type)( ::SireIO::Mol2Substructure const & ) ;
            appendSubstructure_function_type appendSubstructure_function_value( &::SireIO::Mol2Molecule::appendSubstructure );
            
            Mol2Molecule_exposer.def( 
                "appendSubstructure"
                , appendSubstructure_function_value
                , ( bp::arg("substructure") )
                , "Append a substructure to the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::appendSubstructures
        
            typedef void ( ::SireIO::Mol2Molecule::*appendSubstructures_function_type)( ::QVector< SireIO::Mol2Substructure > const & ) ;
            appendSubstructures_function_type appendSubstructures_function_value( &::SireIO::Mol2Molecule::appendSubstructures );
            
            Mol2Molecule_exposer.def( 
                "appendSubstructures"
                , appendSubstructures_function_value
                , ( bp::arg("substructures") )
                , "Append a vector of substructures to the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::getAtom
        
            typedef ::SireIO::Mol2Atom ( ::SireIO::Mol2Molecule::*getAtom_function_type)( int ) const;
            getAtom_function_type getAtom_function_value( &::SireIO::Mol2Molecule::getAtom );
            
            Mol2Molecule_exposer.def( 
                "getAtom"
                , getAtom_function_value
                , ( bp::arg("i") )
                , "Get a specific atom." );
        
        }
        { //::SireIO::Mol2Molecule::getAtoms
        
            typedef ::QVector< SireIO::Mol2Atom > ( ::SireIO::Mol2Molecule::*getAtoms_function_type)(  ) const;
            getAtoms_function_type getAtoms_function_value( &::SireIO::Mol2Molecule::getAtoms );
            
            Mol2Molecule_exposer.def( 
                "getAtoms"
                , getAtoms_function_value
                , "Get the atoms." );
        
        }
        { //::SireIO::Mol2Molecule::getBond
        
            typedef ::SireIO::Mol2Bond ( ::SireIO::Mol2Molecule::*getBond_function_type)( int ) const;
            getBond_function_type getBond_function_value( &::SireIO::Mol2Molecule::getBond );
            
            Mol2Molecule_exposer.def( 
                "getBond"
                , getBond_function_value
                , ( bp::arg("i") )
                , "Get a specific bond." );
        
        }
        { //::SireIO::Mol2Molecule::getBonds
        
            typedef ::QVector< SireIO::Mol2Bond > ( ::SireIO::Mol2Molecule::*getBonds_function_type)(  ) const;
            getBonds_function_type getBonds_function_value( &::SireIO::Mol2Molecule::getBonds );
            
            Mol2Molecule_exposer.def( 
                "getBonds"
                , getBonds_function_value
                , "Get the bonds." );
        
        }
        { //::SireIO::Mol2Molecule::getChargeType
        
            typedef ::QString ( ::SireIO::Mol2Molecule::*getChargeType_function_type)(  ) const;
            getChargeType_function_type getChargeType_function_value( &::SireIO::Mol2Molecule::getChargeType );
            
            Mol2Molecule_exposer.def( 
                "getChargeType"
                , getChargeType_function_value
                , "Get the charge type." );
        
        }
        { //::SireIO::Mol2Molecule::getComment
        
            typedef ::QString ( ::SireIO::Mol2Molecule::*getComment_function_type)(  ) const;
            getComment_function_type getComment_function_value( &::SireIO::Mol2Molecule::getComment );
            
            Mol2Molecule_exposer.def( 
                "getComment"
                , getComment_function_value
                , "Get the comment." );
        
        }
        { //::SireIO::Mol2Molecule::getMolType
        
            typedef ::QString ( ::SireIO::Mol2Molecule::*getMolType_function_type)(  ) const;
            getMolType_function_type getMolType_function_value( &::SireIO::Mol2Molecule::getMolType );
            
            Mol2Molecule_exposer.def( 
                "getMolType"
                , getMolType_function_value
                , "Get the molecule type." );
        
        }
        { //::SireIO::Mol2Molecule::getName
        
            typedef ::QString ( ::SireIO::Mol2Molecule::*getName_function_type)(  ) const;
            getName_function_type getName_function_value( &::SireIO::Mol2Molecule::getName );
            
            Mol2Molecule_exposer.def( 
                "getName"
                , getName_function_value
                , "Get the name of the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::getStatusBits
        
            typedef ::QString ( ::SireIO::Mol2Molecule::*getStatusBits_function_type)(  ) const;
            getStatusBits_function_type getStatusBits_function_value( &::SireIO::Mol2Molecule::getStatusBits );
            
            Mol2Molecule_exposer.def( 
                "getStatusBits"
                , getStatusBits_function_value
                , "Get the status bits." );
        
        }
        { //::SireIO::Mol2Molecule::getSubstructure
        
            typedef ::SireIO::Mol2Substructure ( ::SireIO::Mol2Molecule::*getSubstructure_function_type)( int ) const;
            getSubstructure_function_type getSubstructure_function_value( &::SireIO::Mol2Molecule::getSubstructure );
            
            Mol2Molecule_exposer.def( 
                "getSubstructure"
                , getSubstructure_function_value
                , ( bp::arg("i") )
                , "Get a specific substructure." );
        
        }
        { //::SireIO::Mol2Molecule::getSubstructures
        
            typedef ::QVector< SireIO::Mol2Substructure > ( ::SireIO::Mol2Molecule::*getSubstructures_function_type)(  ) const;
            getSubstructures_function_type getSubstructures_function_value( &::SireIO::Mol2Molecule::getSubstructures );
            
            Mol2Molecule_exposer.def( 
                "getSubstructures"
                , getSubstructures_function_value
                , "Get the substructures." );
        
        }
        { //::SireIO::Mol2Molecule::nAtoms
        
            typedef int ( ::SireIO::Mol2Molecule::*nAtoms_function_type)(  ) const;
            nAtoms_function_type nAtoms_function_value( &::SireIO::Mol2Molecule::nAtoms );
            
            Mol2Molecule_exposer.def( 
                "nAtoms"
                , nAtoms_function_value
                , "Get the number of atoms in the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::nBonds
        
            typedef int ( ::SireIO::Mol2Molecule::*nBonds_function_type)(  ) const;
            nBonds_function_type nBonds_function_value( &::SireIO::Mol2Molecule::nBonds );
            
            Mol2Molecule_exposer.def( 
                "nBonds"
                , nBonds_function_value
                , "Get the number of bonds in the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::nSubstructures
        
            typedef int ( ::SireIO::Mol2Molecule::*nSubstructures_function_type)(  ) const;
            nSubstructures_function_type nSubstructures_function_value( &::SireIO::Mol2Molecule::nSubstructures );
            
            Mol2Molecule_exposer.def( 
                "nSubstructures"
                , nSubstructures_function_value
                , "Get the number of substructures in the molecule." );
        
        }
        { //::SireIO::Mol2Molecule::toMol2Record
        
            typedef ::QVector< QString > ( ::SireIO::Mol2Molecule::*toMol2Record_function_type)(  ) const;
            toMol2Record_function_type toMol2Record_function_value( &::SireIO::Mol2Molecule::toMol2Record );
            
            Mol2Molecule_exposer.def( 
                "toMol2Record"
                , toMol2Record_function_value
                , "Generate a Mol2 record from the molecule data." );
        
        }
        { //::SireIO::Mol2Molecule::toString
        
            typedef ::QString ( ::SireIO::Mol2Molecule::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireIO::Mol2Molecule::toString );
            
            Mol2Molecule_exposer.def( 
                "toString"
                , toString_function_value
                , "Generate a string representation of the object." );
        
        }
        { //::SireIO::Mol2Molecule::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::Mol2Molecule::typeName );
            
            Mol2Molecule_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        Mol2Molecule_exposer.staticmethod( "typeName" );
        Mol2Molecule_exposer.def( "__copy__", &__copy__);
        Mol2Molecule_exposer.def( "__deepcopy__", &__copy__);
        Mol2Molecule_exposer.def( "clone", &__copy__);
        Mol2Molecule_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::Mol2Molecule >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Mol2Molecule_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::Mol2Molecule >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Mol2Molecule_exposer.def( "__str__", &__str__< ::SireIO::Mol2Molecule > );
        Mol2Molecule_exposer.def( "__repr__", &__str__< ::SireIO::Mol2Molecule > );
    }

}
