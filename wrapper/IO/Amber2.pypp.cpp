// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Amber2.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/parallel.h"

#include "SireBase/unittest.h"

#include "SireError/errors.h"

#include "SireMol/molecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "amber2.h"

#include <QElapsedTimer>

#include <QFile>

#include <QHash>

#include <QRegularExpression>

#include <QTextStream>

#include "amber2.h"

SireIO::Amber2 __copy__(const SireIO::Amber2 &other){ return SireIO::Amber2(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Amber2_class(){

    { //::SireIO::Amber2
        typedef bp::class_< SireIO::Amber2, bp::bases< SireIO::MoleculeParser, SireBase::Property > > Amber2_exposer_t;
        Amber2_exposer_t Amber2_exposer = Amber2_exposer_t( "Amber2", "This class is used to read and write AMBER molecule files.\nThe class will aim to support the range of file formats\nused by Amber. This class is based on the original Amber\nclass written by Julien Michel\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope Amber2_scope( Amber2_exposer );
        Amber2_exposer.def( bp::init< SireIO::Amber2 const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireIO::Amber2::coulomb14Factor
        
            typedef double ( ::SireIO::Amber2::*coulomb14Factor_function_type)(  ) const;
            coulomb14Factor_function_type coulomb14Factor_function_value( &::SireIO::Amber2::coulomb14Factor );
            
            Amber2_exposer.def( 
                "coulomb14Factor"
                , coulomb14Factor_function_value
                , "" );
        
        }
        { //::SireIO::Amber2::lj14Factor
        
            typedef double ( ::SireIO::Amber2::*lj14Factor_function_type)(  ) const;
            lj14Factor_function_type lj14Factor_function_value( &::SireIO::Amber2::lj14Factor );
            
            Amber2_exposer.def( 
                "lj14Factor"
                , lj14Factor_function_value
                , "" );
        
        }
        Amber2_exposer.def( bp::self != bp::self );
        { //::SireIO::Amber2::operator=
        
            typedef ::SireIO::Amber2 & ( ::SireIO::Amber2::*assign_function_type)( ::SireIO::Amber2 const & ) ;
            assign_function_type assign_function_value( &::SireIO::Amber2::operator= );
            
            Amber2_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        Amber2_exposer.def( bp::self == bp::self );
        { //::SireIO::Amber2::readRstParm
        
            typedef ::SireSystem::System ( ::SireIO::Amber2::*readRstParm_function_type)( ::QString const &,::QString const &,::SireMol::CuttingFunction const &,::SireBase::PropertyMap const & ) const;
            readRstParm_function_type readRstParm_function_value( &::SireIO::Amber2::readRstParm );
            
            Amber2_exposer.def( 
                "readRstParm"
                , readRstParm_function_value
                , ( bp::arg("rstfile"), bp::arg("prmfile"), bp::arg("cutting_function")=SireMol::ResidueCutting(), bp::arg("map")=SireBase::PropertyMap() )
                , "Read in the molecules from the passed Amber 7 format restart and\ntopologyparameter files, using the passed CuttingFunction to break\nmolecules into parts, and the passed PropertyMap to assign data to\nmolecular properties. The molecules and associated data are retruned\nin the passed SireSystem::System.\n" );
        
        }
        { //::SireIO::Amber2::readRstParm
        
            typedef ::SireSystem::System ( ::SireIO::Amber2::*readRstParm_function_type)( ::QString const &,::QString const &,::SireBase::PropertyMap const &,::SireMol::CuttingFunction const & ) const;
            readRstParm_function_type readRstParm_function_value( &::SireIO::Amber2::readRstParm );
            
            Amber2_exposer.def( 
                "readRstParm"
                , readRstParm_function_value
                , ( bp::arg("rstfile"), bp::arg("prmfile"), bp::arg("map"), bp::arg("cutting_function")=SireMol::ResidueCutting() )
                , "Read in the molecules from the passed Amber 7 format restart and\ntopologyparameter files, using the passed CuttingFunction to break\nmolecules into parts, and the passed PropertyMap to assign data to\nmolecular properties. The molecules and associated data are retruned\nin the passed SireSystem::System.\n" );
        
        }
        { //::SireIO::Amber2::set14Factors
        
            typedef void ( ::SireIO::Amber2::*set14Factors_function_type)( double,double ) ;
            set14Factors_function_type set14Factors_function_value( &::SireIO::Amber2::set14Factors );
            
            Amber2_exposer.def( 
                "set14Factors"
                , set14Factors_function_value
                , ( bp::arg("coul_14"), bp::arg("lj_14") )
                , "" );
        
        }
        { //::SireIO::Amber2::toString
        
            typedef ::QString ( ::SireIO::Amber2::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireIO::Amber2::toString );
            
            Amber2_exposer.def( 
                "toString"
                , toString_function_value
                , "Return a string representation of this object" );
        
        }
        { //::SireIO::Amber2::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::Amber2::typeName );
            
            Amber2_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireIO::Amber2::what
        
            typedef char const * ( ::SireIO::Amber2::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireIO::Amber2::what );
            
            Amber2_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        { //::SireIO::Amber2::writeRstParm
        
            typedef void ( ::SireIO::Amber2::*writeRstParm_function_type)( ::SireSystem::System const &,::QString const &,::QString const &,::SireBase::PropertyMap const & ) const;
            writeRstParm_function_type writeRstParm_function_value( &::SireIO::Amber2::writeRstParm );
            
            Amber2_exposer.def( 
                "writeRstParm"
                , writeRstParm_function_value
                , ( bp::arg("system"), bp::arg("rstfile"), bp::arg("prmfile"), bp::arg("map")=SireBase::PropertyMap() )
                , "Write the molecules in the passed system to the Amber 7 format\nrestart and topologyparameter files called rstfile and prmfile,\nusing the passed PropertyMap to specify which molecular properties\nshould be used" );
        
        }
        Amber2_exposer.staticmethod( "typeName" );
        Amber2_exposer.def( "__copy__", &__copy__);
        Amber2_exposer.def( "__deepcopy__", &__copy__);
        Amber2_exposer.def( "clone", &__copy__);
        Amber2_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::Amber2 >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Amber2_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::Amber2 >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Amber2_exposer.def( "__str__", &__str__< ::SireIO::Amber2 > );
        Amber2_exposer.def( "__repr__", &__str__< ::SireIO::Amber2 > );
    }

}
