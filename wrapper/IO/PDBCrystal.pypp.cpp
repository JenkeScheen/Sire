// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PDBCrystal.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/parallel.h"

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireIO/pdb2.h"

#include "SireMM/pdbparams.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomcoords.h"

#include "SireMol/atomelements.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "pdb2.h"

#include <iostream>

#include "pdb2.h"

SireIO::PDBCrystal __copy__(const SireIO::PDBCrystal &other){ return SireIO::PDBCrystal(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_PDBCrystal_class(){

    { //::SireIO::PDBCrystal
        typedef bp::class_< SireIO::PDBCrystal > PDBCrystal_exposer_t;
        PDBCrystal_exposer_t PDBCrystal_exposer = PDBCrystal_exposer_t( "PDBCrystal", "This class provides functionality for readingwriting\nProtein Data Bank (PDB) CRYST1 records.\n\nAuthor: Lester Hedges\n", bp::init< >("Default constructor.") );
        bp::scope PDBCrystal_scope( PDBCrystal_exposer );
        PDBCrystal_exposer.def( bp::init< QString const &, QStringList & >(( bp::arg("line"), bp::arg("errors") ), "Constructor.") );
        { //::SireIO::PDBCrystal::hasRecord
        
            typedef bool ( ::SireIO::PDBCrystal::*hasRecord_function_type)(  ) const;
            hasRecord_function_type hasRecord_function_value( &::SireIO::PDBCrystal::hasRecord );
            
            PDBCrystal_exposer.def( 
                "hasRecord"
                , hasRecord_function_value
                , "Whether the object contains a record." );
        
        }
        { //::SireIO::PDBCrystal::toPDBRecord
        
            typedef ::QString ( ::SireIO::PDBCrystal::*toPDBRecord_function_type)(  ) const;
            toPDBRecord_function_type toPDBRecord_function_value( &::SireIO::PDBCrystal::toPDBRecord );
            
            PDBCrystal_exposer.def( 
                "toPDBRecord"
                , toPDBRecord_function_value
                , "Generate a PDB record from the crystallographic data." );
        
        }
        { //::SireIO::PDBCrystal::toString
        
            typedef ::QString ( ::SireIO::PDBCrystal::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireIO::PDBCrystal::toString );
            
            PDBCrystal_exposer.def( 
                "toString"
                , toString_function_value
                , "Generate a string representation of the object." );
        
        }
        { //::SireIO::PDBCrystal::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::PDBCrystal::typeName );
            
            PDBCrystal_exposer.def( 
                "typeName"
                , typeName_function_value
                , "Return the C++ name for this class" );
        
        }
        PDBCrystal_exposer.staticmethod( "typeName" );
        PDBCrystal_exposer.def( "__copy__", &__copy__);
        PDBCrystal_exposer.def( "__deepcopy__", &__copy__);
        PDBCrystal_exposer.def( "clone", &__copy__);
        PDBCrystal_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::PDBCrystal >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PDBCrystal_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::PDBCrystal >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PDBCrystal_exposer.def( "__str__", &__str__< ::SireIO::PDBCrystal > );
        PDBCrystal_exposer.def( "__repr__", &__str__< ::SireIO::PDBCrystal > );
    }

}
