// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AmberParm7.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/parallel.h"

#include "SireBase/unittest.h"

#include "SireError/errors.h"

#include "SireSystem/system.h"

#include "amber2.h"

#include <QFile>

#include <QHash>

#include <QTextStream>

#include "amber2.h"

SireIO::AmberParm7 __copy__(const SireIO::AmberParm7 &other){ return SireIO::AmberParm7(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireIO::AmberParm7&){ return "SireIO::AmberParm7";}

void register_AmberParm7_class(){

    { //::SireIO::AmberParm7
        typedef bp::class_< SireIO::AmberParm7 > AmberParm7_exposer_t;
        AmberParm7_exposer_t AmberParm7_exposer = AmberParm7_exposer_t( "AmberParm7", "This class represents an Amber7-format parameter file, currently\nsupporting top files produced from Amber7 until Amber16\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor") );
        bp::scope AmberParm7_scope( AmberParm7_exposer );
        bp::enum_< SireIO::AmberParm7::FLAG_TYPE>("FLAG_TYPE")
            .value("UNKNOWN", SireIO::AmberParm7::UNKNOWN)
            .value("INTEGER", SireIO::AmberParm7::INTEGER)
            .value("FLOAT", SireIO::AmberParm7::FLOAT)
            .value("STRING", SireIO::AmberParm7::STRING)
            .export_values()
            ;
        AmberParm7_exposer.def( bp::init< QString const & >(( bp::arg("filename") ), "Construct by reading from the file called filename") );
        AmberParm7_exposer.def( bp::init< SireSystem::System const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("system"), bp::arg("map")=SireBase::PropertyMap() ), "Construct by converting from the passed system, using the passed property\nmap to find the right properties") );
        AmberParm7_exposer.def( bp::init< SireIO::AmberParm7 const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireIO::AmberParm7::flagType
        
            typedef ::SireIO::AmberParm7::FLAG_TYPE ( ::SireIO::AmberParm7::*flagType_function_type)( ::QString const & ) const;
            flagType_function_type flagType_function_value( &::SireIO::AmberParm7::flagType );
            
            AmberParm7_exposer.def( 
                "flagType"
                , flagType_function_value
                , ( bp::arg("flag") )
                , "" );
        
        }
        { //::SireIO::AmberParm7::flags
        
            typedef ::QStringList ( ::SireIO::AmberParm7::*flags_function_type)(  ) const;
            flags_function_type flags_function_value( &::SireIO::AmberParm7::flags );
            
            AmberParm7_exposer.def( 
                "flags"
                , flags_function_value
                , "Return all of the flags that are held in this file" );
        
        }
        { //::SireIO::AmberParm7::floatData
        
            typedef ::QList< double > ( ::SireIO::AmberParm7::*floatData_function_type)( ::QString const & ) const;
            floatData_function_type floatData_function_value( &::SireIO::AmberParm7::floatData );
            
            AmberParm7_exposer.def( 
                "floatData"
                , floatData_function_value
                , ( bp::arg("flag") )
                , "" );
        
        }
        { //::SireIO::AmberParm7::intData
        
            typedef ::QList< long long > ( ::SireIO::AmberParm7::*intData_function_type)( ::QString const & ) const;
            intData_function_type intData_function_value( &::SireIO::AmberParm7::intData );
            
            AmberParm7_exposer.def( 
                "intData"
                , intData_function_value
                , ( bp::arg("flag") )
                , "" );
        
        }
        { //::SireIO::AmberParm7::lines
        
            typedef ::QStringList ( ::SireIO::AmberParm7::*lines_function_type)(  ) const;
            lines_function_type lines_function_value( &::SireIO::AmberParm7::lines );
            
            AmberParm7_exposer.def( 
                "lines"
                , lines_function_value
                , "Return the raw lines of the Parm7 file" );
        
        }
        { //::SireIO::AmberParm7::lines
        
            typedef ::QStringList ( ::SireIO::AmberParm7::*lines_function_type)( ::QString const & ) const;
            lines_function_type lines_function_value( &::SireIO::AmberParm7::lines );
            
            AmberParm7_exposer.def( 
                "lines"
                , lines_function_value
                , ( bp::arg("flag") )
                , "Return the lines that correspond to the passed flag. This returns an\nempty list of there are no lines associated with the passed flag" );
        
        }
        AmberParm7_exposer.def( bp::self != bp::self );
        { //::SireIO::AmberParm7::operator=
        
            typedef ::SireIO::AmberParm7 & ( ::SireIO::AmberParm7::*assign_function_type)( ::SireIO::AmberParm7 const & ) ;
            assign_function_type assign_function_value( &::SireIO::AmberParm7::operator= );
            
            AmberParm7_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AmberParm7_exposer.def( bp::self == bp::self );
        { //::SireIO::AmberParm7::read
        
            typedef ::SireIO::AmberParm7 ( *read_function_type )( ::QString const & );
            read_function_type read_function_value( &::SireIO::AmberParm7::read );
            
            AmberParm7_exposer.def( 
                "read"
                , read_function_value
                , ( bp::arg("filename") )
                , "Return an AmberParm7 object read from the passed file" );
        
        }
        { //::SireIO::AmberParm7::stringData
        
            typedef ::QStringList ( ::SireIO::AmberParm7::*stringData_function_type)( ::QString const & ) const;
            stringData_function_type stringData_function_value( &::SireIO::AmberParm7::stringData );
            
            AmberParm7_exposer.def( 
                "stringData"
                , stringData_function_value
                , ( bp::arg("flag") )
                , "" );
        
        }
        { //::SireIO::AmberParm7::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::AmberParm7::typeName );
            
            AmberParm7_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireIO::AmberParm7::what
        
            typedef char const * ( ::SireIO::AmberParm7::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireIO::AmberParm7::what );
            
            AmberParm7_exposer.def( 
                "what"
                , what_function_value
                , "" );
        
        }
        { //::SireIO::AmberParm7::write
        
            typedef ::SireIO::AmberParm7 ( *write_function_type )( ::SireSystem::System const &,::SireBase::PropertyMap const & );
            write_function_type write_function_value( &::SireIO::AmberParm7::write );
            
            AmberParm7_exposer.def( 
                "write"
                , write_function_value
                , ( bp::arg("system"), bp::arg("map")=SireBase::PropertyMap() )
                , "Return an AmberParm7 object created from the passed System" );
        
        }
        AmberParm7_exposer.staticmethod( "read" );
        AmberParm7_exposer.staticmethod( "typeName" );
        AmberParm7_exposer.staticmethod( "write" );
        AmberParm7_exposer.def( "__copy__", &__copy__);
        AmberParm7_exposer.def( "__deepcopy__", &__copy__);
        AmberParm7_exposer.def( "clone", &__copy__);
        AmberParm7_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::AmberParm7 >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AmberParm7_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::AmberParm7 >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AmberParm7_exposer.def( "__str__", &pvt_get_name);
        AmberParm7_exposer.def( "__repr__", &pvt_get_name);
    }

}
