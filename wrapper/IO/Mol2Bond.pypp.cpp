// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Mol2Bond.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/parallel.h"

#include "SireBase/stringproperty.h"

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireIO/mol2.h"

#include "SireMM/mol2params.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomcoords.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/units.h"

#include "mol2.h"

#include "mol2.h"

SireIO::Mol2Bond __copy__(const SireIO::Mol2Bond &other){ return SireIO::Mol2Bond(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Mol2Bond_class(){

    { //::SireIO::Mol2Bond
        typedef bp::class_< SireIO::Mol2Bond > Mol2Bond_exposer_t;
        Mol2Bond_exposer_t Mol2Bond_exposer = Mol2Bond_exposer_t( "Mol2Bond", "This class provides functionality for readingwriting\nMol2 BOND records.\n\nAuthor: Lester Hedges\n", bp::init< >("Default constructor.") );
        bp::scope Mol2Bond_scope( Mol2Bond_exposer );
        Mol2Bond_exposer.def( bp::init< QString const &, QStringList & >(( bp::arg("line"), bp::arg("errors") ), "Constructor.") );
        { //::SireIO::Mol2Bond::getID
        
            typedef ::qint64 ( ::SireIO::Mol2Bond::*getID_function_type)(  ) const;
            getID_function_type getID_function_value( &::SireIO::Mol2Bond::getID );
            
            Mol2Bond_exposer.def( 
                "getID"
                , getID_function_value
                , "Get the bond ID." );
        
        }
        { //::SireIO::Mol2Bond::getOrigin
        
            typedef ::qint64 ( ::SireIO::Mol2Bond::*getOrigin_function_type)(  ) const;
            getOrigin_function_type getOrigin_function_value( &::SireIO::Mol2Bond::getOrigin );
            
            Mol2Bond_exposer.def( 
                "getOrigin"
                , getOrigin_function_value
                , "Get the ID of the origin atom." );
        
        }
        { //::SireIO::Mol2Bond::getTarget
        
            typedef ::qint64 ( ::SireIO::Mol2Bond::*getTarget_function_type)(  ) const;
            getTarget_function_type getTarget_function_value( &::SireIO::Mol2Bond::getTarget );
            
            Mol2Bond_exposer.def( 
                "getTarget"
                , getTarget_function_value
                , "Get the ID of the target atom." );
        
        }
        { //::SireIO::Mol2Bond::getType
        
            typedef ::QString ( ::SireIO::Mol2Bond::*getType_function_type)(  ) const;
            getType_function_type getType_function_value( &::SireIO::Mol2Bond::getType );
            
            Mol2Bond_exposer.def( 
                "getType"
                , getType_function_value
                , "Get the bond type." );
        
        }
        { //::SireIO::Mol2Bond::toMol2Record
        
            typedef ::QString ( ::SireIO::Mol2Bond::*toMol2Record_function_type)(  ) const;
            toMol2Record_function_type toMol2Record_function_value( &::SireIO::Mol2Bond::toMol2Record );
            
            Mol2Bond_exposer.def( 
                "toMol2Record"
                , toMol2Record_function_value
                , "Generate a Mol2 record from the bond data." );
        
        }
        { //::SireIO::Mol2Bond::toString
        
            typedef ::QString ( ::SireIO::Mol2Bond::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireIO::Mol2Bond::toString );
            
            Mol2Bond_exposer.def( 
                "toString"
                , toString_function_value
                , "Generate a string representation of the object." );
        
        }
        { //::SireIO::Mol2Bond::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::Mol2Bond::typeName );
            
            Mol2Bond_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        Mol2Bond_exposer.staticmethod( "typeName" );
        Mol2Bond_exposer.def( "__copy__", &__copy__);
        Mol2Bond_exposer.def( "__deepcopy__", &__copy__);
        Mol2Bond_exposer.def( "clone", &__copy__);
        Mol2Bond_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::Mol2Bond >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Mol2Bond_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::Mol2Bond >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Mol2Bond_exposer.def( "__str__", &__str__< ::SireIO::Mol2Bond > );
        Mol2Bond_exposer.def( "__repr__", &__str__< ::SireIO::Mol2Bond > );
    }

}
