// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PDBTransform.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/parallel.h"

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireIO/pdb2.h"

#include "SireMM/pdbparams.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomcoords.h"

#include "SireMol/atomelements.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "pdb2.h"

#include <iostream>

#include "pdb2.h"

SireIO::PDBTransform __copy__(const SireIO::PDBTransform &other){ return SireIO::PDBTransform(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_PDBTransform_class(){

    { //::SireIO::PDBTransform
        typedef bp::class_< SireIO::PDBTransform > PDBTransform_exposer_t;
        PDBTransform_exposer_t PDBTransform_exposer = PDBTransform_exposer_t( "PDBTransform", "This class provides functionality for readingwriting\nProtein Data Bank (PDB) ORIGXn transformation records.\n\nThese records present the transformation from the orthogonal\ncoordinates contained in the entry to the submitted coordinates.\n\nAuthor: Lester Hedges\n", bp::init< >("Default constructor.") );
        bp::scope PDBTransform_scope( PDBTransform_exposer );
        { //::SireIO::PDBTransform::appendRecord
        
            typedef void ( ::SireIO::PDBTransform::*appendRecord_function_type)( ::QString const &,int,bool,::QStringList & ) ;
            appendRecord_function_type appendRecord_function_value( &::SireIO::PDBTransform::appendRecord );
            
            PDBTransform_exposer.def( 
                "appendRecord"
                , appendRecord_function_value
                , ( bp::arg("line"), bp::arg("dimension"), bp::arg("isNonCryst"), bp::arg("errors") )
                , "Append a record to the transformation object." );
        
        }
        { //::SireIO::PDBTransform::hasRecord
        
            typedef bool ( ::SireIO::PDBTransform::*hasRecord_function_type)(  ) const;
            hasRecord_function_type hasRecord_function_value( &::SireIO::PDBTransform::hasRecord );
            
            PDBTransform_exposer.def( 
                "hasRecord"
                , hasRecord_function_value
                , "Whether this object contains a complete transformation record." );
        
        }
        { //::SireIO::PDBTransform::toPDBRecord
        
            typedef ::QStringList ( ::SireIO::PDBTransform::*toPDBRecord_function_type)(  ) const;
            toPDBRecord_function_type toPDBRecord_function_value( &::SireIO::PDBTransform::toPDBRecord );
            
            PDBTransform_exposer.def( 
                "toPDBRecord"
                , toPDBRecord_function_value
                , "Generate a PDB record from the ORIGXn transformation data." );
        
        }
        { //::SireIO::PDBTransform::toString
        
            typedef ::QString ( ::SireIO::PDBTransform::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireIO::PDBTransform::toString );
            
            PDBTransform_exposer.def( 
                "toString"
                , toString_function_value
                , "Generate a string representation of the object." );
        
        }
        { //::SireIO::PDBTransform::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::PDBTransform::typeName );
            
            PDBTransform_exposer.def( 
                "typeName"
                , typeName_function_value
                , "Return the C++ name for this class" );
        
        }
        PDBTransform_exposer.staticmethod( "typeName" );
        PDBTransform_exposer.def( "__copy__", &__copy__);
        PDBTransform_exposer.def( "__deepcopy__", &__copy__);
        PDBTransform_exposer.def( "clone", &__copy__);
        PDBTransform_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::PDBTransform >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PDBTransform_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::PDBTransform >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PDBTransform_exposer.def( "__str__", &__str__< ::SireIO::PDBTransform > );
        PDBTransform_exposer.def( "__repr__", &__str__< ::SireIO::PDBTransform > );
    }

}
